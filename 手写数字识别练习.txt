import torch
import torchvision
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

#定义参数
n_epochs = 3
batch_size_train = 64
batch_size_test = 1000
learning_rate = 0.01
momentum = 0.5
log_interval = 10
random_seed = 1
torch.manual_seed(random_seed)

#获取训练集和测试集
train_loader = torch.utils.data.DataLoader(torchvision.datasets.MNIST('./data/', train=True, download=True,
                             transform=torchvision.transforms.Compose([
                               torchvision.transforms.ToTensor(),
                               torchvision.transforms.Normalize(
                                 (0.1307,), (0.3081,))
                             ])),batch_size=batch_size_train, shuffle=True)

test_loader = torch.utils.data.DataLoader(torchvision.datasets.MNIST('./data/', train=False, download=True,
                             transform=torchvision.transforms.Compose([
                               torchvision.transforms.ToTensor(),
                               torchvision.transforms.Normalize(
                                 (0.1307,), (0.3081,))
                             ])),batch_size=batch_size_test, shuffle=True)
"""
提取数据
examples = enumerate(test_loader)
batch_idx, (example_data, example_targets) = next(examples)


#显示图片
fig = plt.figure()
for i in range(9):
    plt.subplot(3,3,i+1)
    plt.tight_layout()
    plt.imshow(example_data[i][0], cmap='gray', interpolation='none')
    plt.title("Ground Truth: {}".format(example_targets[i]))
    plt.xticks([])
    plt.yticks([])
plt.show().
"""

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        #nn.Conv2d()二维卷积
        self.conv1 = nn.Conv2d(1, 10, kernel_size=3)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=3)
        #nn.Dropout2d()随机将整个通道置零
        self.conv2_drop = nn.Dropout2d()
        #nn.Linear()数据线性变换
        self.fc1 = nn.Linear(500, 100)
        self.fc2 = nn.Linear(100, 10)
    def forward(self, x):
        #卷积层
        x = self.conv1(x)
    #池化层  采用步长为2的最大池化
        x = F.max_pool2d(x, 2)
        #采用relu激活函数
        x = F.relu(x)
    #卷积层
        x = self.conv2(x)
        x = self.conv2_drop(x)
    #池化层
        x = F.max_pool2d(x , 2)
        #激活函数
        x = F.relu(x)
    #全连接层
        #view()将一个多行的Tensor,拼接成一行
        x = x.view(-1, 500)
        x = F.relu(self.fc1(x))
        #随机失活
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        #返回取对数的多分类概率输出
        x = F.log_softmax(x)
        return x

#调用网络 
network = Net()
#optim.SGD实现随机梯度下降算法
#module..parameters()获取网络的参数
optimizer = optim.SGD(network.parameters(), lr=learning_rate,
                      momentum=momentum)

train_losses = []
train_counter = []
test_losses = []
test_counter = [i*len(train_loader.dataset) for i in range(n_epochs + 1)]

def train(epoch):
    network.train()
    #enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中
    for batch_idx, (data, target) in enumerate(train_loader):
        #将梯度设置为0
        optimizer.zero_grad()
        #将数据喂入搭建的神经网络
        output = network(data)
        #计算output与target误差
        loss = F.nll_loss(output, target)
        #反向传播
        loss.backward()
        #更新模型参数
        optimizer.step()
        if batch_idx % log_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(epoch, batch_idx * len(data), len(train_loader.dataset),
                                                                           100. * batch_idx / len(train_loader), loss.item()))
            train_losses.append(loss.item())
            train_counter.append((batch_idx*64) + ((epoch-1)*len(train_loader.dataset)))
            #torch.save保存模型参数
            torch.save(network.state_dict(), './model.pth')
            torch.save(optimizer.state_dict(), './optimizer.pth')
train(1)

def test():
    network.eval()
    test_loss = 0
    correct = 0
    #不能进行梯度计算的上下文管理器减少内存消耗
    with torch.no_grad():
        for data, target in test_loader:
            output = network(data)
            #.item()取出单元素张量的元素值并返回该值，保持原元素类型不变
            test_loss += F.nll_loss(output, target, size_average=False).item()
            pred = output.data.max(1, keepdim=True)[1]
            correct += pred.eq(target.data.view_as(pred)).sum()
    test_loss /= len(test_loader.dataset)
    test_losses.append(test_loss)
    print('\nTest set: Avg. loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(test_loss, correct, len(test_loader.dataset),
                                                                              100. * correct / len(test_loader.dataset)))

for epoch in range(1, n_epochs + 1):
    train(epoch)
    test()